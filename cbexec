#!/usr/bin/env sh
# shellcheck disable=SC2086
# vim: filetype=sh:tabstop=4:tw=76

###########################################################################
# Start

RUN="command"
TRU="true"
LNG="c++"
ARX="-invalid"
TST="test"
SED="sed"
EXT="${1##*.}"
IFP="${IFS:-}"
GTO="/dev/null"
CAT="cat"
RMF="rm"
CCC="gcc"
CXX="g++"
DMD="dmd"
XGO="go"
FOR="gfortran"
FRE="-ffree-form"
FIX="-ffixed-form"
COB="cobc"
OML="ocaml"
MAT="octave -q"
KSH="ksh"
BSH="bash"
ZSX="zsh"
EML="emacs"
CSH="csh"
PSH="yash"
PSX="pwsh"
IFS='
 '

###########################################################################
# Check input

if [ ! -f "${1:-}" ]; then
	printf '%s\n' \
		"Error: input not found." \
			>&2
	exit "1"
fi

###########################################################################
# Create output

OUT="$(mktemp -p "${TMPDIR:-/tmp/}" XXXXXXXX.exe)" ||
	{
		printf '%s\n' \
			"Error: mktemp failed." \
				>&2
		exit "1"
	}

###########################################################################
# Run compiler

run_compiler()
{

###########################################################################
# C

	if [ "${EXT:-}" = "c" ]; then
		LNG="c" &&
			ARX="-o ${OUT:?} -x ${LNG:?} -"
		${RUN:?} \
			"${CCC:?}" ${ARX:?}
		${TST:?} -x "${OUT:?}" &&
			${RUN:?} \
				"${OUT:?}"

###########################################################################
# C++

	elif [ "${EXT:-}" = "c++" ] ||
		[ "${EXT:-}" = "cpp" ]; then
		LNG="c++" &&
			ARX="-o ${OUT:?} -x ${LNG:?} -"
		${RUN:?} \
			"${CXX:?}" ${ARX:?}
		${TST:?} -x "${OUT:?}" &&
			${RUN:?} \
				"${OUT:?}"

###########################################################################
# F90

	elif [ "${EXT:-}" = "f" ] ||
		[ "${EXT:-}" = "for" ] ||
		[ "${EXT:-}" = "f95" ] ||
		[ "${EXT:-}" = "fort" ]; then
		LNG="f95" &&
			ARX="-o ${OUT:?} -x ${LNG:?} -"
		${RUN:?} \
			"${FOR:?}" "${FRE:-}" ${ARX:?}
		${TST:?} -x "${OUT:?}" &&
			${RUN:?} \
				"${OUT:?}"

###########################################################################
# F77

	elif [ "${EXT:-}" = "f77" ] ||
		[ "${EXT:-}" = "FOR" ]; then
		LNG="f77" &&
			ARX="-o ${OUT:?} -x ${LNG:?} -"
		${RUN:?} \
			"${FOR:?}" "${FIX:-}" ${ARX:?}
		${TST:?} -x "${OUT:?}" &&
			${RUN:?} \
				"${OUT:?}"

###########################################################################
# COBOL

	elif [ "${EXT:-}" = "cobol" ] ||
		[ "${EXT:-}" = "cob" ] ||
		[ "${EXT:-}" = "COB" ]; then
		ARX="-o ${OUT:?} -x -"
		${RUN:?} \
			"${COB:?}" ${ARX:?}
		${TST:?} -x "${OUT:?}" &&
			${RUN:?} \
				"${OUT:?}"

###########################################################################
# D

	elif [ "${EXT:-}" = "d" ]; then
		${RUN:?} \
			"${DMD:?}" -of="${OUT:?}" -
		${TST:?} -x "${OUT:?}" &&
			${RUN:?} \
				"${OUT:?}"
		${RMF} "-f" ${OUT%.exe}.o \
			> "/dev/null" \
				2>&1 ||
					${TRU:?}

###########################################################################
# Go

	elif [ "${EXT:-}" = "go" ]; then
		GTO="$(mktemp -p "${TMPDIR:-/tmp/}" XXXXXXX.go)" ||
			{
				printf '%s\n' \
					"Error: mktemp failed." \
						>&2
				exit "1"
			} &&
			ARX="-o ${OUT:?} ${GTO:?}"
		${RUN:?} \
			"${CAT:?}" "-" \
				> "${GTO:?}"
		${RUN:?} \
			"${XGO:?}" "build" ${ARX:?}
		"${RMF:?}" "-f" "${GTO:?}" \
			> "/dev/null" \
				2>&1 ||
					"${TRU:?}"
		${TST:?} -x "${OUT:?}" &&
			${RUN:?} \
				"${OUT:?}"

###########################################################################
# Ocaml

	elif [ "${EXT:-}" = "ml" ] ||
		[ "${EXT:-}" = "oml" ]; then
		OMC="$(mktemp -p "${TMPDIR:-/tmp/}" XXXXXXX.ml)" ||
			{
				printf '%s\n' \
					"Error: mktemp failed." \
						>&2
				exit "1"
			} &&
			${RUN:?} \
				"${CAT:?}" "-" \
					> "${OMC:?}"
			${RUN:?} \
				"${OML:?}" "${OMC:?}"
			"${RMF:?}" "-f" "${OMC:?}" \
				> "/dev/null" \
					2>&1 ||
						"${TRU:?}"
		${TST:?} -x "${OUT:?}" &&
			${RUN:?} \
				"${OUT:?}"

###########################################################################
# MATLAB / Octave

	elif [ "${EXT:-}" = "m" ]; then
		${RUN:?} \
			${MAT:?}

###########################################################################
# POSIX Shell

	elif [ "${EXT:-}" = "sh" ]; then
		${RUN:?} \
			"${PSH:?}"

###########################################################################
# Korn Shell

	elif [ "${EXT:-}" = "ksh" ]; then
		${RUN:?} \
			"${KSH:?}"

###########################################################################
# Zsh

	elif [ "${EXT:-}" = "zsh" ]; then
		${RUN:?} \
			"${ZSX:?}"

###########################################################################
# Bash

	elif [ "${EXT:-}" = "bash" ]; then
		${RUN:?} \
			"${BSH:?}"

##########################################################################
# Tcsh

	elif [ "${EXT:-}" = "csh" ] ||
		[ ${EXT:-} = "tcsh" ]; then
		${RUN:?} \
			"${CSH:?}"

###########################################################################
# Emacs Lisp

	elif [ "${EXT:-}" = "el" ]; then
		ETO="$(mktemp -p "${TMPDIR:-/tmp/}" XXXXXXX.el)" ||
			{
				printf '%s\n' \
					"Error: mktemp failed." \
						>&2
				exit "1"
			} &&
			ARX="-Q --batch -l ${ETO:?}"
		${RUN:?} \
			"${CAT:?}" "-" \
				> "${ETO:?}"
		${RUN:?} \
			"${EML:?}" ${ARX:?}
		"${RMF:?}" "-f" "${ETO:?}" \
			> "/dev/null" \
				2>&1 ||
					"${TRU:?}"

##########################################################################
# PowerShell

	elif [ "${EXT:-}" = "pwsh" ] ||
		[ "${EXT:-}" = "ps1" ]; then
		PW1="$(mktemp -p "${TMPDIR:-/tmp/}" XXXXXXX.ps1)" ||
			{
				printf '%s\n' \
					"Error: mktemp failed." \
						>&2
				exit "1"
			} &&
		${RUN:?} \
			"${CAT:?}" "-" \
				> "${PW1:?}"
		${RUN:?} \
			"${PSX:?}" "${PW1:?}"
		"${RMF:?}" "-f" "${PW1:?}" \
			> "/dev/null" \
				2>&1 ||
					"${TRU:?}"

###########################################################################
# Fallback

	else
		printf '%s\n' \
			"Error: Unknown extension \"${EXT:-}\"." \
				>&2
		exit "1"
	fi
}

###########################################################################
# Run sed

do_sed()
{
	${RUN:?} \
		"${SED:?}" "${@:?}"
}

###########################################################################
# Run script

# shellcheck disable=SC2016
"do_sed" "-n" '2,$p' \
	"${@:?}" |
		"run_compiler"
EXL="${?:?}"

###########################################################################
# Clean-up

"${RMF:?}" "-f" "${OUT:?}" \
	> "/dev/null" \
		2>&1 ||
			"${TRU:?}"

###########################################################################
# Restore IFS

IFS="${IFP:-}"

###########################################################################
# End

exit "${EXL:-0}"

###########################################################################
# Emacs configuration

# Local Variables:
# mode: sh
# sh-shell: sh
# sh-indentation: 4
# sh-basic-offset: 4
# tab-width: 4
# End:

###########################################################################
