#!/usr/bin/env sh
# shellcheck disable=SC2086

###########################################################################
# Start

RUN="command"
TRU="true"
LNG="c++"
ARX="-invalid"
TST="test"
SED="sed"
EXT="${1##*.}"
IFP="${IFS:-}"
GTO="/dev/null"
CAT="cat"
RMF="rm"
CCC="gcc"
CXX="g++"
DMD="dmd"
XGO="go"
FOR="gfortran"
FRE="-ffree-form"
FIX="-ffixed-form"
COB="cobc"
OML="ocaml"
IFS='
 '

###########################################################################
# Check parameters

if [ "${#*}" -lt 1 ]; then
	printf '%s\n' \
		"Error: No file specified." \
			>&2
	exit 1
fi

###########################################################################
# Check input

if [ ! -f "${1:-}" ]; then
	printf '%s\n' \
		"Error: \"$1\" not found." \
			>&2
	exit 1
fi

###########################################################################
# Create output

OUT="$(mktemp -p "${TMPDIR:-/tmp/}" XXXXXXXX.exe)" ||
	{
		printf '%s\n' \
			"Error: mktemp failed." \
				>&2
		exit 1
	}

###########################################################################
# Run compiler

run_compiler()
{

###########################################################################
# C

	if [ "${EXT:-}" = "c" ]; then
		LNG="c" &&
			ARX="-o ${OUT:?} -x ${LNG:?} -"
		${RUN:?} \
			"${CCC:?}" ${ARX:?}
		${TST:?} -x "${OUT:?}" &&
			${RUN:?} \
				"${OUT:?}"

###########################################################################
# C++

	elif [ "${EXT:-}" = "c++" ] ||
		[ "${EXT:-}" = "cpp" ]; then
		LNG="c++" &&
			ARX="-o ${OUT:?} -x ${LNG:?} -"
		${RUN:?} \
			"${CXX:?}" ${ARX:?}
		${TST:?} -x "${OUT:?}" &&
			${RUN:?} \
				"${OUT:?}"

###########################################################################
# F90

	elif [ "${EXT:-}" = "f" ] ||
		[ "${EXT:-}" = "for" ] ||
		[ "${EXT:-}" = "f95" ] ||
		[ "${EXT:-}" = "fort" ]; then
		LNG="f95" &&
			ARX="-o ${OUT:?} -x ${LNG:?} -"
		${RUN:?} \
			"${FOR:?}" "${FRE:-}" ${ARX:?}
		${TST:?} -x "${OUT:?}" &&
			${RUN:?} \
				"${OUT:?}"

###########################################################################
# F77

	elif [ "${EXT:-}" = "f77" ] ||
		[ "${EXT:-}" = "FOR" ]; then
		LNG="f77" &&
			ARX="-o ${OUT:?} -x ${LNG:?} -"
		${RUN:?} \
			"${FOR:?}" "${FRE:-}" ${ARX:?}
		${TST:?} -x "${OUT:?}" &&
			${RUN:?} \
				"${OUT:?}"

###########################################################################
# COBOL

	elif [ "${EXT:-}" = "cobol" ] ||
		[ "${EXT:-}" = "cob" ] ||
		[ "${EXT:-}" = "COB" ]; then
		ARX="-o ${OUT:?} -x -"
		${RUN:?} \
			"${COB:?}" ${ARX:?}
		${TST:?} -x "${OUT:?}" &&
			${RUN:?} \
				"${OUT:?}"

###########################################################################
# D

	elif [ "${EXT:-}" = "d" ]; then
		${RUN:?} \
			"${DMD:?}" -of="${OUT:?}" -
		${TST:?} -x "${OUT:?}" &&
			${RUN:?} \
				"${OUT:?}"

###########################################################################
# Go

	elif [ "${EXT:-}" = "go" ]; then
		GTO="$(mktemp -p "${TMPDIR:-/tmp/}" XXXXXXX.go)" ||
			{
				printf '%s\n' \
					"Error: mktemp failed." \
						>&2
				exit 1
			} &&
			ARX="-o ${OUT:?} ${GTO:?}"
		${RUN:?} \
			"${CAT:?}" "-" \
			> "${GTO:?}"
		${RUN:?} \
			"${XGO:?}" "build" ${ARX:?}
		"${RMF:?}" "-f" "${GTO:?}" \
			> "/dev/null" \
				2>&1 ||
			"${TRU:?}"
		${TST:?} -x "${OUT:?}" &&
			${RUN:?} \
				"${OUT:?}"

###########################################################################
# Ocaml

	elif [ "${EXT:-}" = "ml" ] ||
		[ "${EXT:-}" = "oml" ]; then
		OMC="$(mktemp -p "${TMPDIR:-/tmp/}" XXXXXXX.ml)" ||
			{
				printf '%s\n' \
					"Error: mktemp failed." \
						>&2
				exit 1
			} &&
			${RUN:?} \
				"${CAT:?}" "-" \
				> "${OMC:?}"
			${RUN:?} \
				"${OML:?}" "${OMC:?}"
			"${RMF:?}" "-f" "${OMC:?}" \
				> "/dev/null" \
					2>&1 ||
				"${TRU:?}"
		${TST:?} -x "${OUT:?}" &&
			${RUN:?} \
				"${OUT:?}"

###########################################################################
# Fallback

	else
		printf '%s\n' \
			"Error: Unknown extension \"${EXT:-}\"." \
				>&2
		exit "1"
	fi
}

###########################################################################
# Run sed

do_sed()
{
	${RUN:?} \
		"${SED:?}" "${@:?}"
}

###########################################################################
# Run script

# shellcheck disable=SC2016
"do_sed" "-n" '2,$p' "${@:?}" |
	"run_compiler"
EXL="${?:?}"

###########################################################################
# Clean-up

"${RMF:?}" "-f" "${OUT:?}" \
	> "/dev/null" \
		2>&1 ||
	"${TRU:?}"

###########################################################################
# Restore IFS

IFS="${IFP:-}"

###########################################################################
# End

exit "${EXL:-0}"

###########################################################################
